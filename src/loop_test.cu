#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <math.h>
#include <ctime>
#include <time.h>

#include <cuda_runtime.h>

#define MAXNUM 10000

// gpu loop rolling
void __global__ loop_kernel_rolling(int *a,int *b,int *c,int n)
{
    int index= threadIdx.x + blockIdx.x * blockDim.x;
    int gridStride = gridDim.x * blockDim.x;
    for(int i=index; i<n; i+=gridStride)
        c[i]=a[i]+b[i];
}

// gpu loop unrolling
void __global__ loop_kernel_unrolling(int *a,int *b,int *c,int n)
{
    int index= threadIdx.x + blockIdx.x * blockDim.x;
    int gridStride = gridDim.x * blockDim.x;
    int i = index;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return; // 10 time
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return; // 100 times
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return; // 10 time
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return; // 10 time
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return; // 10 time
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return; // 10 time
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return; // 10 time
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return; // 10 time
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return; // 10 time
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return; // 10 time
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return; // 10 time
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return;
    c[i]=a[i]+b[i];
    i+=gridStride;
    if(i>=n) return; // 1000 times
}

// cpu kernel
void add_cpu(int *a,int *b,int *c,int n)
{
    for(int i=0;i<n;i++)
        c[i]=a[i]+b[i];
}

// test cpu and gpu array result
bool resultcompare(int *h_c,int *d_c,int n)
{
    for(int i=0;i<n;i++)
    {
        if(h_c[i]!=d_c[i]) 
        {
            printf("There is ERROR in c[%d]: cpu:%d  gpu:%d!\n",i,h_c[i],d_c[i]);
            return false;
        }
    }
    return true;
}

int main()
{

    srand(time(0));

    // Get array size
    int n ;
    printf("Input array size:\n");
    scanf("%d",&n);

    // Host memory
    int *a;
    int *b;
    int *c_gpu_u;
    int *c_gpu_r;
    int *c_cpu=new int[n];
    int size = n*sizeof(int);
    cudaMallocManaged(&a, size);
    cudaMallocManaged(&b, size);
    cudaMallocManaged(&c_gpu_u, size);
    cudaMallocManaged(&c_gpu_r, size);

    // Srand number into array
    for(int i=0;i<n;i++)
    {
        a[i]=rand()%MAXNUM; 
        b[i]=rand()%MAXNUM;
    }

    // CPU add reference
    clock_t begin,end;
    double cpu_timer;
    begin=clock();
    add_cpu(a,b,c_cpu,n);
    end=clock();
    cpu_timer=(double)(end-begin)/CLOCKS_PER_SEC;
    cpu_timer*=1000;
    printf("The total cpu run time is %f ms.\n",cpu_timer);
 
    // GPU add runtime
    size_t threads_per_block = 256;
    size_t number_of_blocks = 4;

    // record time & begin time
    cudaEvent_t start,stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);

    // gpu loop rolling runtime
    cudaEventRecord(start,0);

    loop_kernel_rolling<<<number_of_blocks, threads_per_block>>>(a,b,c_gpu_r,n);
    cudaDeviceSynchronize();

    cudaEventRecord(stop,0); 
    float gpu_timer1;
    cudaEventSynchronize(start);    
    cudaEventSynchronize(stop); 
    cudaEventElapsedTime(&gpu_timer1,start,stop);
    printf("The total gpu rolling run time is %f ms.\n",gpu_timer1);


    // gpu loop unrolling runtime
    cudaEventRecord(start,0);

    loop_kernel_unrolling<<<number_of_blocks, threads_per_block>>>(a,b,c_gpu_u,n);
    cudaDeviceSynchronize();

    cudaEventRecord(stop,0); 
    float gpu_timer2;
    cudaEventSynchronize(start);    
    cudaEventSynchronize(stop); 
    cudaEventElapsedTime(&gpu_timer2,start,stop);
    printf("The total gpu unrolling run time is %f ms.\n",gpu_timer2);


    // Check result
    bool ret=resultcompare(c_cpu,c_gpu_r,n);
    if(ret) printf("Test rolling Success!\n");
    ret=resultcompare(c_cpu,c_gpu_u,n);
    if(ret) printf("Test unrolling Success!\n");

    // Free memory
    cudaFree(a);
    cudaFree(b);
    cudaFree(c_gpu_r);
    cudaFree(c_gpu_u);
}